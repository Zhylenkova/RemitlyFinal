package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	"swiftTask/handlers"

	"github.com/gin-gonic/gin"
	"go.etcd.io/bbolt"
)

const dbFile = "swift_codes.db"
const bucketName = "swift_code"

func main() {
	// Initialize BoltDB
	db, err := bbolt.Open(dbFile, 0600, nil)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err)
	}
	defer db.Close()

	// Populate DB (only if empty)
	populateDatabase(db, "swiftCodes.csv")

	// Setup API with Gin
	router := gin.Default()

	// Define endpoints
	router.GET("/v1/swift-codes/:swift-code", handlers.GetSwiftCodeDetails(db, bucketName))
	router.DELETE("/v1/swift-codes/:swift-code", handlers.DeleteSwiftCode(db, bucketName))
	router.GET("/v1/swift-codes/country/:countryISO2code", handlers.GetSwiftCodesByCountry(db, bucketName))
	router.POST("/v1/swift-codes", handlers.AddSwiftCode(db, bucketName))

	// Start server
	fmt.Println("Server running on port 8080...")
	router.Run(":8080")
}

// Populate database from CSV
func populateDatabase(db *bbolt.DB, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è CSV:", err)
		return
	}
	defer file.Close()

	reader := csv.NewReader(file)
	reader.Comma = ';'
	records, err := reader.ReadAll()

	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV:", err)
		return
	}

	if len(records) == 0 {
		log.Println("‚ùå –§–∞–π–ª CSV –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
		return
	}

	log.Printf("üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: %d\n", len(records))

	db.Update(func(tx *bbolt.Tx) error {
		b, err := tx.CreateBucketIfNotExists([]byte(bucketName))
		if err != nil {
			return err
		}

		count := 0
		for i, record := range records {
			if i == 0 {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
			}

			if len(record) < 6 {
				log.Printf("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ %d: %v (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n", i, record)
				continue
			}

			swiftData := handlers.SwiftCode{
				Address:       record[4],
				BankName:      record[3],
				CountryISO2:   strings.ToUpper(record[0]),
				CountryName:   strings.ToUpper(record[6]),
				IsHeadquarter: handlers.IsHeadquarter(record[1]),
				SwiftCode:     record[1],
			}

			data, err := json.Marshal(swiftData)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–æ–∫–∏ %d: %v\n", i, err)
				continue
			}

			// –í—Å—Ç–∞–≤–ª—è–µ–º –≤ BoltDB
			err = b.Put([]byte(record[1]), data)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ BoltDB: %v\n", err)
			} else {
				log.Printf("‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω SWIFT-–∫–æ–¥: %s", record[1])
				count++
			}
		}

		log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑—É –∑–∞–ø–∏—Å–µ–π: %d\n", count)
		return nil
	})
}
